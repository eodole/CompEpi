

import sys
import numpy as np
from datetime import date, datetime
import random
import PoissonSampling as ps
import random
import MCClustSampling as ms
import datetime

#Initialize simulation characteristics
initial_id = 0
schedule = []
start_date = datetime.datetime(2020,1,1,7,0)
input_staffing = {}
#input_staffing[x] = [# of staff of that jtype, [mu, sigma, prop] duration params, lambda total visits per hour, lambda unique visits ]

# Set Up for Facility 19
n_rooms = 9
input_staffing[1] = [14,[[4.138547, 4.298266, 4.542755, 4.774257, 4.964680, 5.128424, 5.295261, 5.462723,5.623456, 5.785664, 5.958570, 6.142223, 6.378021, 6.705965, 6.683211],[0.001090754, 0.008169358, 0.011072772, 0.009694219, 0.007117625, 0.006558795,0.007033539, 0.006691495, 0.005916170, 0.007231847, 0.008197831, 0.012169378,0.028377903, 0.114519951, 0.558511172],[0.02698043, 0.08080979, 0.09289271, 0.08350555, 0.06576930, 0.06531669,0.07005875, 0.06737007, 0.05786204, 0.06300401, 0.05352210, 0.04990721,0.05615901, 0.08285090, 0.08399145]], 0.9867820, 7,2.837756]
input_staffing[2] = [2,[[4.129023, 4.297313, 4.580766, 4.842487, 5.065884, 5.272198, 5.468626, 5.662112, 5.841116, 6.021446, 6.225452, 6.436104, 6.721416, 7.090060, 6.759118 ],[0.0007033047, 0.0092327367, 0.0170358633, 0.0107407342, 0.0114389615,0.0096593680, 0.0082124554, 0.0089763420, 0.0084785126, 0.0096304833, 0.0115974455, 0.0182663724, 0.0359601398, 0.1156509049, 0.6298924939],[0.02257846, 0.07021512, 0.09410770, 0.06639839, 0.07519549, 0.07079870, 0.06592262, 0.06894944, 0.05777585, 0.06590656, 0.05854170, 0.05639796,0.06247329, 0.10530364, 0.05943509]],0.723937,1.64873]
input_staffing[3] = [4,[[4.148627, 4.334870, 4.595506, 4.807303, 4.991052, 5.139258, 5.272017, 5.411901, 5.557041, 5.705928, 5.866590, 6.046649, 6.289432, 6.593103, 6.537442 ],[0.001549258, 0.010751990, 0.011059453, 0.007741057, 0.006714994, 0.004840197, 0.004732768, 0.004724497, 0.005606512, 0.006085783, 0.006761706, 0.011273660, 0.023267800, 0.072450645, 0.393434976],[0.03008393, 0.09170729, 0.08966055, 0.07207247, 0.07193747, 0.05652837, 0.05831005, 0.06275545, 0.06191347, 0.06256772, 0.05660406, 0.06186474, 0.06851536, 0.08250125, 0.07297783]],0.98578,1.40641]
input_staffing[4] = [2,[[4.119583 ,4.255399, 4.551418, 4.836292, 5.080328, 5.252669, 5.454756, 5.662506, 5.870545, 6.105915, 6.366155, 6.747221, 6.804579],[0.000283407, 0.006249163, 0.023634448, 0.012410513, 0.009308874, 0.008987305, 0.007406911, 0.008313558, 0.011896040, 0.017211012, 0.031973236, 0.134056845, 0.702755282],[0.02731974, 0.05813071, 0.13148038, 0.09066241, 0.07754613, 0.07122121, 0.07829588, 0.06780813, 0.06888085, 0.06317830, 0.05759299, 0.10879931, 0.09908396]],0.076465 , 0.76266]
input_staffing[5]= [1,[[4.124859, 4.294538, 4.691480, 5.173724, 5.540994, 5.851074, 6.137683, 6.436075, 6.708791, 7.013611, 7.425510, 6.983012],[0.0005120378, 0.0100503621, 0.0426122684, 0.0343665657, 0.0242217901, 0.0218293815, 0.0203759672, 0.0235330585, 0.0263997651, 0.0370108776, 0.0821031625, 0.7188613105],[0.01643065, 0.05443077, 0.13790333, 0.11261336, 0.08834214, 0.08904670, 0.08453657, 0.08324346, 0.07330003, 0.08622949, 0.12602519, 0.04789831]], 0.591943,1.29454 ]
input_staffing[6] = [10, [[4.125730, 4.259392, 4.544496, 4.835155, 5.024960, 5.172811, 5.314199, 5.462406, 5.621973, 5.783403, 5.947962, 6.128325, 6.358203, 6.689631, 6.802772],[0.0005847003, 0.0060457728, 0.0220775700, 0.0118573215, 0.0067609378, 0.0061108789, 0.0059097674, 0.0064583007, 0.0070667383, 0.0075203810, 0.0084892471, 0.0149326829, 0.0437896384, 0.1850885615, 0.9790103168],[0.01730858, 0.05026426, 0.12756647, 0.08721090, 0.06184879, 0.05942497, 0.06278215, 0.06957894, 0.07194041, 0.06514432, 0.05479076, 0.05421155, 0.08005892, 0.11448842, 0.02338055]],0.450773 , 1.787938] 
input_staffing[7] = [1,[[4.125824, 4.245498, 4.457724, 4.678351, 4.848227, 4.999832, 5.143392, 5.284219, 5.429226, 5.575651, 5.721776, 5.892777, 6.129340, 6.456950, 6.796699 ],[0.0006163268, 0.0047903917, 0.0102536732, 0.0080419298, 0.0056620841, 0.0057251617, 0.0050329900, 0.0054974731, 0.0053856993, 0.0055329695, 0.0073729066, 0.0139312185, 0.0387680224, 0.1616252817, 0.7917624855],[0.02168070, 0.06127260, 0.09700552, 0.08193338, 0.06299653, 0.07205142, 0.06347395, 0.06895563, 0.06582344, 0.05742326, 0.05099716, 0.05448759,  0.07200722, 0.10699379, 0.06289781]], 1.2084441 ,2.383679 ]
input_staffing[8] = [1,[[4.122867, 4.237249, 4.461052, 4.692960, 4.885881, 5.075321, 5.250655, 5.427998, 5.614621, 5.813748, 6.080466, 6.395637, 6.402846],[0.0004883406, 0.0044226154, 0.0126173972, 0.0086180461, 0.0092612768,0.0087557502, 0.0077175421, 0.0088225931, 0.0097576448, 0.0185653779, 0.0430830274, 0.1552227779, 0.5867401146],[0.02460488, 0.06353617, 0.11572368, 0.08119491, 0.08372430, 0.08436504, 0.06960043, 0.07754710, 0.06073292, 0.06366825, 0.07699228, 0.10284197,0.09546806]],0.255531 , 0.5319]
input_staffing[9] = [2,[[4.132725, 4.257929, 4.482636, 4.722576, 4.914596, 5.071264, 5.210230, 5.345290, 5.498543, 5.706541, 5.953890, 5.918857], [0.0008257153, 0.0053031100, 0.0124813483, 0.0091664625, 0.0073940268, 0.0062090883, 0.0058704013, 0.0061398676, 0.0099912146, 0.0213081126,0.0778918417, 0.3291512101],[0.02779948, 0.07017570, 0.12521997, 0.10345731, 0.08558295, 0.07553839, 0.06430390, 0.06513131, 0.06865253, 0.08807404, 0.13448583 ,0.09157860]],0.149028 ,0.82194]
input_staffing[10] = [3, [[4.140695, 4.309859, 4.624879, 4.960691, 5.203892, 5.427269, 5.650441, 5.883696, 6.115983, 6.346090, 6.599107, 6.919996],[0.001188644, 0.009622394, 0.023605610, 0.017357791, 0.014699204, 0.012300200, 0.012714183, 0.014367107, 0.015202642, 0.022135931, 0.052454285, 0.212574347],[0.02614049, 0.07336863, 0.13151154, 0.09616439, 0.08312557, 0.08169016, 0.08452208, 0.09081210, 0.07308021 ,0.06061915 ,0.05841791 ,0.14054777]], 1.009868 ,1.866639 ]
input_staffing[18] = [1, [[4.121340, 4.292371, 4.780662, 5.394781, 5.957277, 6.442101],[0.0002433675, 0.0100941012, 0.0701029938, 0.0875933550, 0.2441063391, 0.6082630022],[0.02603932 ,0.05808881 ,0.27909397, 0.24430646 ,0.29116134, 0.10131009]] , 0.24074 , 0.63957]
input_staffing[20] = [6, [[4.179047, 4.533202, 4.923281, 5.118609, 5.276647, 5.388074, 5.489263, 5.587849, 5.688920, 5.799035, 5.917305, 6.057038, 6.227283, 6.470633, 6.218008 ],[0.003451375, 0.034779644, 0.019560974, 0.008067891, 0.004164447, 0.002897887, 0.002585607, 0.002526688, 0.002930557, 0.003281462, 0.004589021, 0.008228934, 0.017753685, 0.074521095, 0.367062499],[0.01919842, 0.08286670, 0.08441949, 0.06749582, 0.05881989, 0.06021415, 0.05711116, 0.06211940, 0.06685914, 0.06340223, 0.06009364, 0.05645953, 0.05707541, 0.09074840, 0.11311662]],0.468433 ,1.10665 ]
input_staffing[21] = [1,[[4.122109, 4.234809, 4.468846, 4.838226, 5.278595, 5.772300, 6.315088 ],[0.0004610755, 0.0043251907, 0.0191755672, 0.0280939893, 0.0662187437, 0.1852932130, 0.4737822990],[0.03249845, 0.08303360, 0.17691401, 0.17866434, 0.16997541, 0.20189255, 0.15702164]],0.25066 ,0.5568 ]
input_staffing[23] = [1,[[4.194812, 4.526347, 5.108529, 5.797033, 6.391556],[0.004553871, 0.033974274, 0.097429825, 0.162907689, 0.409056251],[0.03931325, 0.14567082, 0.32543544, 0.29175626, 0.19782423]], 0.15196,-0.6693]
input_staffing[26] = [1, [[4.124375, 4.265075, 4.545018, 4.833059, 5.043646, 5.231104 ,5.440281 ,5.646064 ,5.849484 ,6.048084 ,6.240035, 6.449564 ,6.734333 ,7.177731, 7.042236 ], [0.0005233392, 0.0066180431, 0.0204856051, 0.0116662252, 0.0085664090 ,0.0088136818, 0.0085761818, 0.0081154082, 0.0082675483, 0.0089876377 ,0.0112209033, 0.0147352285, 0.0314161299, 0.0971180540 ,0.3465528979], [0.01905488, 0.05612137, 0.10943639, 0.07458534, 0.06175089, 0.07258146, 0.07428915, 0.06963582, 0.06919765, 0.05887423, 0.06045852, 0.05329400, 0.05500223, 0.08983105, 0.07588703]],0.43215 , 0.52826]
input_staffing[30] = [1, [[4.102023, 4.175017, 4.317880, 4.501727, 4.675886, 4.845597, 5.041854, 5.286525, 5.637325, 6.019533, 6.574479 ], [0.00007862697,0.001703891, 0.006206994, 0.006048526,0.005748218, 0.008985997, 0.01122259, 0.0246627, 0.05963944, 0.1552691,0.6112485], [0.01707860, 0.07307679, 0.13454412, 0.11450365, 0.09362738, 0.09657530, 0.09376883, 0.10274551, 0.08635761, 0.09845775, 0.08926448]],0.879852 , 0.879852] #Not enough unique visits 
input_staffing[33] = [1, [[4.117604, 4.214545, 4.413882, 4.654137, 4.840531, 4.998078, 5.150384, 5.296138, 5.425479, 5.561610, 5.713683, 5.896661, 6.091044, 6.345996, 6.690579  ] ,[0.0003745835, 0.0032627851, 0.0112825086, 0.0087237469, 0.0065635788, 0.0063329168, 0.0066732147, 0.0054045528, 0.0045914505, 0.0052604244, 0.0073925589, 0.0121137013, 0.0292226659, 0.0981645299, 0.6124588965] ,[0.02247604, 0.05849484, 0.11449144, 0.08447792, 0.06399777, 0.06254516, 0.07381337, 0.06317415, 0.05945461, 0.06170764, 0.06722151, 0.05512401, 0.05852443, 0.07981791, 0.07467920]],0.69822 , 0.86824 ]

#Returns a list of numbers that represent the rids and order that they are visited in
def room_order(unique_r,total_r):
    
    visited = []
    #If there is >1 unique room pick from the first 
    #n rooms with replacement to choose the next (total -n) rooms
    if len(unique_r) > 1:
        for i in range(0,total_r):
            idx = random.randint(0, len(unique_r)-1)
            visited.append(unique_r[idx])
    else:
        r = unique_r[0]
        visited = [r] * total_r

    return visited
        
  

#Assign an hid number to the healthcare worker 
def assign_hid():
    global initial_id
    tmp = initial_id
    initial_id = initial_id +1
    return tmp

def assign_visit_dur(staff_info):
    #Initialize Parameters 
    mu = staff_info[1][0]
    sigma = staff_info[1][1]
    prop = staff_info[1][2]
    #Sample mcclust for duration time
    duration = ms.generate_sample(mu,sigma,prop) 
    return duration


# Visits are generate in an hourly fashion 
# Where each hour is returned as a list of visit tuples 
# Each tuple represents a healthcare worker visiting a room
# Parameters for each tuple are hid,jtid,duration, intime, outtime 
def generate_visits(hid,jtid,staff_info,visited,itime):
    
    durations = []
    synthetic_v = []
    
    # Generate visit length for each visit in that hour
    for i in range(0,len(visited)):
        durations.append(assign_visit_dur(staff_info))
    
    # Find the amount of time not being used in visits 
    not_visit_time = (60*60-sum(durations))/len(visited)
   
    # Find the itimes using the non_visit time information to 
    # properly space the visits
    itimes = random_date(itime,not_visit_time,len(visited))
    
    #Put everything together and append each tuple to synthetic visits for that hour
    for i in range(0,len(itimes)):
        intime = itimes[i] 
        dur = durations[i]
        otime = intime + datetime.timedelta(seconds=dur)
        rid = visited[i]
        synthetic_v.append((hid,jtid,rid,dur,str(intime),str(otime)))
    return(synthetic_v)

        

def total_visits_shift(lam): 
    #lam = lam per hour
    total_v= ps.generate_sample(lam)
    return total_v



def random_date(start,not_visit_time,n_visits):
    itimes = []
    for n in range(0,n_visits):
        
        random_date = start + datetime.timedelta(seconds=random.randrange(np.abs(not_visit_time//10)))
        itimes.append(random_date)
        start = start + datetime.timedelta(seconds= not_visit_time)

    return itimes

#print(random_date(start_date, end_date))

if __name__ == "__main__":
    #For each job type...
    for jtid in input_staffing.keys():
        staff_info = input_staffing[jtid]
        #Generate n staff...
        for n_staff in range(0,staff_info[0]):
            #Assign hid, n rooms visited 
            hid = assign_hid()
            #unq_v = ps.generate_sample(staff_info[3])
            unq_r = list(range(0,n_rooms))
            random.shuffle(unq_r)
            unq_r = unq_r[0: (ps.generate_sample(staff_info[3])-1) ]
            
            #Start at hour 0 of the day 
            for h in range(0,12):
                #Find the total num visits made in that hour
                total_v = total_visits_shift(staff_info[2])
                
                #If num rooms are visited then visited == empty
                if total_v > 0: 
                    visited = room_order(unq_r,total_v)
                else:
                    visited = []
                
                #If there are visits made in that hour, generate them 
                if len(visited) > 0:
                    schedule.append(generate_visits(hid,jtid,staff_info,visited,start_date + datetime.timedelta(hours=h)))
    print(schedule)
                
               
            